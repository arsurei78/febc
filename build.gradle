buildscript {
    ext {
        queryDslVersion = "5.0.0"
        egovframe = "4.1.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.0'  // 전자정부 프레임워크 4.1.0의 spring framework 버전
    id 'io.spring.dependency-management' version '1.0.15.RELEASE' // 프레임워크 의존성관리
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id "org.sonarqube" version "4.2.1.3168"
}

// TODO 프로젝트 작성시 수정
bootJar{
    archivesBaseName = 'sessionTemplate' // 프로젝트 이름
    archiveFileName = 'empty_project-SNAPSHOT.jar' // 새성되는 jar파일 이름
    archiveVersion = "0.0.1" // 버전
}

// TODO 프로젝트 작성시 수정
group = 'egovframework.session'
version = 'SNAPSHOT'
sourceCompatibility = "17"

configurations {
    all {
        //logback과의 충돌 방지
        exclude group : 'org.springframework.boot', module : 'spring-boot-starter-logging'
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}
 
// Set repository
repositories {
    mavenCentral()
    maven {
        url = uri("https://maven.egovframe.go.kr/maven/")
        metadataSources {
            mavenPom()
            artifact()
        }
    }
}

// Set source directory
sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'src/test/java'
        }
        resources {
            srcDir 'src/main/resources'
            srcDir 'src/test/resources'
        }
    }
}
 
// dependencies to run on tomcat, are mandatory for tomcat plugin
dependencies {

    // web
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-test'

    // jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // JDBC드라이브
    runtimeOnly 'org.springframework.boot:spring-boot-starter-jdbc'
    // mariadb 드라이버
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    // oracle
    runtimeOnly 'com.oracle.database.jdbc:ojdbc8'
    implementation group: 'com.oracle.ojdbc', name: 'orai18n', version: '19.3.0.0'

    // 테스트용 H2
    runtimeOnly 'com.h2database:h2:2.2.222'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // 자동으로 서버 재 시작 설정적용(개발용)
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    // Log4j2
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'

    //전자정부프레임워크
    implementation ("org.egovframe.rte:org.egovframe.rte.ptl.mvc:${egovframe}"){
        exclude group : 'org.egovframe.rte', module : 'spring-modules-validation'
        exclude group : 'commons-logging', module : 'commons-logging'
    }
    implementation "org.egovframe.rte:org.egovframe.rte.fdl.cmmn:${egovframe}"
    implementation "org.egovframe.rte:org.egovframe.rte.bat.core:${egovframe}"
    implementation "org.egovframe.rte:org.egovframe.rte.fdl.idgnr:${egovframe}"
    implementation "org.egovframe.rte:org.egovframe.rte.fdl.property:${egovframe}"

    // spring Security
    implementation "org.springframework.security:spring-security-core:5.7.1"
    implementation "org.springframework.security:spring-security-web:5.7.1"
    implementation "org.springframework.security:spring-security-config:5.7.1"

    // 커넥션 풀 라이브러리
    implementation 'org.apache.commons:commons-dbcp2'
    // 내장형 톰켓 서버
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
    // 스프링 프레임워크
    implementation 'org.springframework:spring:5.3.20'

    // QUERYDSL
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"

    // 웹소켓
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.webjars:sockjs-client:1.1.2'
    implementation 'org.webjars:stomp-websocket:2.3.3-1'

    // thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
    // thymeleaf Security용
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'

    // JSON <=> OBJECT 파싱
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.2'
    // JSON데이터 처리
    implementation 'com.googlecode.json-simple:json-simple:1.1'

    // WebClient
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    // 캐쉬
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    // 인코딩 / 디코딩
    implementation 'commons-codec:commons-codec:1.9'

    // JUNIT
    testImplementation 'org.junit.jupiter:junit-jupiter:5.6.2'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.1.1'
    testImplementation 'org.mockito:mockito-core:5.1.1'
    testImplementation 'org.mockito:mockito-inline:5.1.1'

    // 파일 업로드
    implementation 'commons-fileupload:commons-fileupload:1.5'
    implementation 'commons-io:commons-io:2.11.0'
}

test {
    useJUnitPlatform()
}

tasks.named('test') {
    useJUnitPlatform()
    processResources {
        duplicatesStrategy = org.gradle.api.file.DuplicatesStrategy.INCLUDE
    }
}

/*
 * queryDSL 설정 추가
 */
// querydsl에서 사용할 경로 설정
def querydslDir = "$buildDir/generated/querydsl"

// JPA 사용 여부와 사용할 경로를 설정
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
// build 시 사용할 sourceSet 추가
sourceSets {
    main.java.srcDir querydslDir
}

// querydsl 컴파일시 사용할 옵션 설정
compileQuerydsl{
    options.annotationProcessorPath = configurations.querydsl
}
// querydsl 이 compileClassPath 를 상속하도록 설정
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}
targetCompatibility = JavaVersion.VERSION_17



sonarqube {
    properties {
        property 'sonar.projectKey', 'telos_lx-admin_AYuPXT0LHMLdITbMV-qG'
        property 'sonar.projectName', 'Lx admin'
        property 'sonar.host.url', 'http://192.168.0.185:9000'
        property 'sonar.token', 'sqp_68eec2ee4e627be09e2ae06c842dba47e8bec3ee'
        property 'sonar.exclusions', "**/test/**"
    }
}

